{box
 {:type :pclass,
  :args [],
  :fields
  {:ball-in-motion
   {:access :public,
    :observable true,
    :initial {:type :literal, :value false}}},
  :modes
  {:open {:type :literal, :value true},
   :close {:type :literal, :value true}},
  :methods
  {open-lid
   {:pre {:type :mode-reference, :pclass this, :mode :close},
    :post {:type :mode-reference, :pclass this, :mode :open},
    :cost 0,
    :reward 0,
    :controllable false,
    :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
    :betweens [],
    :body nil,
    :args []},
   close-lid
   {:pre {:type :mode-reference, :pclass this, :mode :open},
    :post {:type :mode-reference, :pclass this, :mode :close},
    :cost 0,
    :reward 0,
    :controllable false,
    :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
    :betweens [],
    :body nil,
    :args []},
   reset
   {:pre {:type :literal, :value true},
    :post {:type :mode-reference, :pclass this, :mode :open},
    :cost 0,
    :reward 0,
    :controllable false,
    :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
    :betweens [],
    :body nil,
    :args []}}},
 cannon
 {:type :pclass,
  :args [],
  :fields
  {:ammunitions
   {:access :private,
    :observable true,
    :initial {:type :literal, :value 5}},
   :ready
   {:access :public,
    :observable true,
    :initial {:type :literal, :value false}}},
  :methods
  {fire
   {:pre {:type :literal, :value true},
    :post {:type :literal, :value true},
    :cost 0,
    :reward 0,
    :controllable false,
    :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
    :betweens [],
    :body nil,
    :args [arg1 arg2]},
   reset
   {:pre {:type :literal, :value true},
    :post {:type :literal, :value true},
    :cost 0,
    :reward 0,
    :controllable false,
    :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
    :betweens [],
    :body nil,
    :args []}}},
 game
 {:type :pclass,
  :args [],
  :fields
  {:cannon-f
   {:access :private,
    :observable false,
    :initial {:type :pclass-ctor, :pclass cannon, :args []}},
   :box-f
   {:access :private,
    :observable false,
    :initial {:type :pclass-ctor, :pclass box, :args []}}},
  :methods
  {main
   {:pre {:type :literal, :value true},
    :post {:type :literal, :value true},
    :cost 0,
    :reward 0,
    :controllable false,
    :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
    :betweens [],
    :body
    [{:type :parallel,
      :body
      [{:type :whenever,
        :body
        [{:type :tell,
          :condition
          {:type :equal,
           :args
           [{:type :state-variable, :name all-clear}
            {:type :literal, :value true}]}}],
        :condition
        {:type :equal,
         :args
         [{:type :field-reference-field,
           :pclass this,
           :field :box-f,
           :value :ball-in-motion}
          {:type :literal, :value true}]}}
       {:type :whenever,
        :body
        [{:type :unless,
          :body
          [{:type :try,
            :body
            [{:type :sequence,
              :body
              [{:type :assert,
                :body nil,
                :condition
                {:type :equal,
                 :args
                 [{:type :field-reference, :pclass this, :field :box-f}
                  {:type :mode-reference, :pclass box, :mode :open}]}}
               {:type :maintain,
                :body
                [{:type :sequence,
                  :body
                  [{:type :plant-fn-field,
                    :field :cannon-f,
                    :method fire,
                    :args [123 "456"],
                    :temporal-constraints
                    [{:type :bounds, :value [1 7]}]}
                   {:type :ask,
                    :body nil,
                    :condition
                    {:type :equal,
                     :args
                     [{:type :state-variable, :name all-clear}
                      {:type :literal, :value true}]}}]}],
                :condition
                {:type :equal,
                 :args
                 [{:type :field-reference, :pclass this, :field :box-f}
                  {:type :mode-reference, :pclass box, :mode :open}]}}
               {:type :plant-fn-field,
                :field :box-f,
                :method close,
                :args []}]}],
            :catch
            [{:type :sequence,
              :body
              [{:type :parallel,
                :body
                [{:type :plant-fn-field,
                  :field :box-f,
                  :method reset,
                  :args []}
                 {:type :plant-fn-field,
                  :field :cannon-f,
                  :method reset,
                  :args []}]}
               {:type :delay,
                :body nil,
                :temporal-constraints
                [{:type :bounds, :value [30 30]}]}]}],
            :temporal-constraints [{:type :bounds, :value [2 20]}]}],
          :condition
          {:type :equal,
           :args
           [{:type :field-reference-field,
             :pclass this,
             :field :cannon-f,
             :value :ammunitions}
            {:type :literal, :value 0}]}}],
        :condition
        {:type :equal,
         :args
         [{:type :field-reference-field,
           :pclass this,
           :field :cannon-f,
           :value :ready}
          {:type :literal, :value true}]}}],
      :temporal-constraints [{:type :bounds, :value [1 60]}]}],
    :args []}}},
 all-clear {:type :state-variable}}
