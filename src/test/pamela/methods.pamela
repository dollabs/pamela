;; Copyright Â© 2016 Dynamic Object Language Labs Inc.
;;
;; This software is licensed under the terms of the
;; Apache License, Version 2.0 which can be found in
;; the file LICENSE at the root of this distribution.

;; Example of primitive and non primitive method.

;;; Acknowledgement and Disclaimer:
;;; This material is based upon work supported by the Army Contracting
;;; and DARPA under contract No. W911NF-15-C-0005.
;;; Any opinions, findings and conclusions or recommendations expressed
;;; in this material are those of the author(s) and do necessarily reflect the
;;; views of the Army Contracting Command and DARPA.

(defpclass plant-methods []
           :meta {:version "0.2.1"
                  :doc "The Plant API"}
           :methods [(defpmethod primitive
                                 {:doc    "A primitive method"}
                                 [arg1 arg2])
                     (defpmethod nonprimitive
                                 {:doc    "A non primitive method"
                                  :bounds [10 50]}
                                 []
                                 (this.primitive 42.445370 -71.227891))
                     ])

(defpclass tpn-methods [arg1 arg2]
           :meta {:version "0.2.1"
                  :doc "TPN with primitive and non primitive methods"}
           :methods [(defpmethod entry-method
                                 {:doc "Check methods"}
                                 []
                                 (parallel
                                   (sequence
                                     (arg1.primitive :bounds [5 20]
                                       42.445370 -71.227891))
                                   (sequence
                                     (arg2.nonprimitive))
                                   ))
                     ])

(defpclass wrapper []
           :meta {:version "0.2.0"
                  :depends [[plant-methods "0.2.1"]
                            [tpn-methods "0.2.1"]]
                  :doc "Test methods"}
  :fields {:qc1 (plant-methods :id "qc1")
           :qc2 (plant-methods :id "qc2")
           :go (tpn-methods qc1 qc2)})
