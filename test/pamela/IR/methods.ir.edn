{plant-methods
 {:type :pclass,
  :args [],
  :meta {:version "0.2.1", :doc "The Plant API"},
  :methods
  {primitive
   [{:args [arg1 arg2],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
     :reward 0,
     :controllable false,
     :primitive true,
     :betweens [],
     :display-name "Primitive",
     :post {:type :literal, :value true},
     :cost 0,
     :body nil,
     :doc "A primitive method"}],
   nonprimitive
   [{:args [],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [10 50]}],
     :reward 0,
     :controllable false,
     :primitive false,
     :betweens [],
     :display-name "Nonprimitive",
     :post {:type :literal, :value true},
     :cost 0,
     :body
     [{:type :plant-fn-symbol,
       :name this,
       :method primitive,
       :args [42.44537 -71.227891]}],
     :doc "A non primitive method"}]}},
 tpn-methods
 {:type :pclass,
  :args [arg1 arg2],
  :meta
  {:version "0.2.1",
   :doc "TPN with primitive and non primitive methods"},
  :methods
  {entry-method
   [{:args [],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
     :reward 0,
     :controllable false,
     :primitive false,
     :betweens [],
     :display-name "Entry Method",
     :post {:type :literal, :value true},
     :cost 0,
     :body
     [{:type :parallel,
       :body
       [{:type :sequence,
         :body
         [{:type :plant-fn-symbol,
           :name arg1,
           :method primitive,
           :args [42.44537 -71.227891],
           :temporal-constraints [{:type :bounds, :value [5 20]}]}]}
        {:type :sequence,
         :body
         [{:type :plant-fn-symbol,
           :name arg2,
           :method nonprimitive,
           :args []}]}]}],
     :doc "Check methods"}]}},
 wrapper
 {:type :pclass,
  :args [],
  :meta
  {:version "0.2.0",
   :depends {plant-methods "0.2.1", tpn-methods "0.2.1"},
   :doc "Test methods"},
  :fields
  {:qc1
   {:access :private,
    :observable false,
    :initial
    {:type :pclass-ctor, :pclass plant-methods, :args [], :id "qc1"}},
   :qc2
   {:access :private,
    :observable false,
    :initial
    {:type :pclass-ctor, :pclass plant-methods, :args [], :id "qc2"}},
   :go
   {:access :private,
    :observable false,
    :initial
    {:type :pclass-ctor, :pclass tpn-methods, :args [qc1 qc2]}}}}}
