;; Copyright Â© 2016 Dynamic Object Language Labs Inc.
;;
;; This software is licensed under the terms of the
;; Apache License, Version 2.0 which can be found in
;; the file LICENSE at the root of this distribution.

;; Acknowledgement and Disclaimer:
;; This material is based upon work supported by the Army Contracting
;; and DARPA under contract No. W911NF-15-C-0005.
;; Any opinions, findings and conclusions or recommendations expressed
;; in this material are those of the author(s) and do necessarily reflect the
;; views of the Army Contracting Command and DARPA.

;; inheritance example: syntax for passing superclass args

(defpclass camera [range]
  :meta {:version "0.1.0"
         :doc "The camera API"}
  :fields {:range range}
  :methods [(defpmethod take-snapshopt
              {:doc    "Record a still image"}
              [])
            ])

(defpclass qc [capacity]
  :meta {:version "0.3.0"
         :doc "The Plant API"}
  :fields {:capacity capacity}
  :methods [(defpmethod location
              {:doc    "Move quadcopter to location lat (WGS84), lon (WGS84), alt (meters), yaw (degrees from north)"}
              [lat lon alt yaw])
            (defpmethod wp1
              {:doc    "Waypoint 1"
               :bounds [11 50]}
              []
              (location 42.445370 -71.227891 1.0 80))
            (defpmethod wp2
              {:doc    "Waypoint 2"
               :bounds [12 50]}
              []
              (location 42.445435 -71.227842 2.0 170))
            (defpmethod wp3
              {:doc    "Waypoint 3"
               :bounds [13 50]}
              []
              (location 42.445389 -71.227733 3.0 260))
            (defpmethod wp4
              {:doc    "Waypoint 4"
               :bounds [14 50]}
              []
              (location 42.445327 -71.227784 4.0 350))
            ])

(defpclass qc-cam [capacity range]
  :inherit [(qc capacity)   ;; will inherit :plant-* from this
            (camera range)] ;; will inherit :plant-* from this
  :methods [(defpmethod location
              {:doc    "Move quadcopter to location lat (WGS84), lon (WGS84), alt (meters), yaw (degrees from north) and take a snapshot"}
              [lat lon alt yaw]
              ;; Here we want to call superclass location() and need to
              ;; invent a way to do that. HOWEVER based on the principle
              ;; that subclasses SHOULD be representable with flat PAMELA
              ;; then we CAN'T do this because both location functions
              ;; have the same signature!
              (this.0.location lat lon alt yaw)
              ;; calls method inherited from superclass
              (take-snapshot))])

(defpclass qc-waypoints []
  :meta {:version "0.3.0"
         :doc "Quadcopter test waypoints"}
  :methods [(defpmethod circuit-one
              {:doc "First quadcopter circuit"}
              [q]
              (sequence
                (q.location :bounds [5 20] 42.445370 -71.227895 1.0 80)
                (q.location :bounds [5 20] 42.445435 -71.227846 2.0 170)
                (q.location :bounds [5 20] 42.445389 -71.227737 3.0 260)
                (q.location :bounds [5 20] 42.445327 -71.227788 4.0 350)
                (q.location :bounds [5 20] 42.445370 -71.227899 1.0 80)))
            (defpmethod circuit-two
              {:doc "Second quadcopter circuit"}
              [q]
              (sequence
                (q.wp2)
                (q.wp3)
                (q.wp4)
                (q.wp1)
                (q.wp2)))
            (defpmethod waypoints
              {:doc "Two quadcopter pattern of waypoints"}
              [qc1 qc2]
              (parallel
                (circuit-one qc1)
                (circuit-two qc2)))
            ])

(defpclass qc-demo []
  :meta {:version "0.3.0"
         :depends [[qc "0.3.0"]
                   [qc-waypoints "0.3.0"]]
         :doc "Quadcopter test waypoints"}
  :fields {:qc1 (qc-cam :id "qc1" :plant-part "pp1" :interface "RMQ")
           :qc2 (qc-cam :id "qc2" :plant-part "pp2" :interface "ZMQ")}
  :methods [(defpmethod main
              {:doc "Two quadcopter demo"}
              []
              (qc-waypoints.waypoints :qc1 :qc2))])
