;; Copyright Â© 2016 Dynamic Object Language Labs Inc.
;;
;; This software is licensed under the terms of the
;; Apache License, Version 2.0 which can be found in
;; the file LICENSE at the root of this distribution.

;; Acknowledgement and Disclaimer:
;; This material is based upon work supported by the Army Contracting
;; and DARPA under contract No. W911NF-15-C-0005.
;; Any opinions, findings and conclusions or recommendations expressed
;; in this material are those of the author(s) and do necessarily reflect the
;; views of the Army Contracting Command and DARPA.

;; HTN to test more complex root-task specification

(defpclass simpleplant []
  :meta {:doc "The Simple Plant Example"}
  :methods [(defpmethod hardwork
              {:doc "Simulated work with a simulated failure"
               :bounds [1 20]}
              [time])
            (defpmethod scp
              {:doc "Secure network file copy"
               :bounds [10 20]}
              [fromfile tofile])
            (defpmethod cp
              {:doc "local file copy"}
              [fromfile tofile])
            (defpmethod shell
              {:doc "Runs a command-line program"
               :bounds [0 3]}
              [cmd arg1 arg2 arg3])
            (defpmethod python
              {:doc "Runs a python script"}
              [script options arg1 arg2 arg3])
            (defpmethod stop
              {:doc    "Stops the plant"
               :bounds [0 1]}
              [area])
            ])

(defpclass planttest [plant]
  :meta {:doc "Plant Test"}
  :methods [(defpmethod main
              {:doc "The HTN"}
              []
              (sequence
                (plant.hardwork :bounds [10 20] 10)
                (plant.scp :bounds [0 99]
                  "bigfile" "me@192.168.11.100:~me/copyofbigfile")
                (plant.cp :bounds [0 99] "bigfile" "copyofbigfile")
                (plant.shell :bounds [0 99] "ls" "-lart" ">" "foo")
                (plant.python :bounds [0 99] "myscript.py" "2" "3" "4" "5")
                (delay :bounds [3 3])
                (plant.stop "McDonalds")))])

(defpclass simple-plant-demo []
  :fields {:sp1 (simpleplant :id "myplant" :plant-part "mypart" :interface "RMQ")
           :run (planttest sp1)})
