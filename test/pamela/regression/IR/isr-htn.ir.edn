{isr-htn
 {:type :pclass,
  :args [sensor],
  :meta
  {:doc "This defines all of the HTN methods for this ISR domain"},
  :fields
  {:sensor-f
   {:access :private,
    :observable false,
    :initial {:type :arg-reference, :name sensor}}},
  :methods
  {main
   [{:args [a b c d],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
     :reward 0,
     :controllable false,
     :primitive false,
     :betweens [],
     :display-name "Main",
     :post {:type :literal, :value true},
     :cost 0,
     :body
     [{:type :sequence,
       :body
       [{:type :plant-fn-symbol,
         :name this,
         :method get-data-at,
         :args [a]}
        {:type :plant-fn-symbol,
         :name this,
         :method get-data-and-interpret,
         :args [a b]}
        {:type :plant-fn-symbol,
         :name this,
         :method get-data-and-interpret,
         :args [b c]}
        {:type :plant-fn-symbol,
         :name this,
         :method get-data-and-interpret,
         :args [c d]}
        {:type :plant-fn-symbol,
         :name this,
         :method evidence-and-interpret,
         :args [d]}]}]}],
   get-data-at
   [{:args [loc],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
     :reward 0,
     :controllable false,
     :primitive false,
     :betweens [],
     :display-name "Get Data At",
     :post {:type :literal, :value true},
     :cost 0,
     :body
     [{:type :sequence,
       :body
       [{:type :plant-fn-field,
         :field :sensor-f,
         :method go-to,
         :args [loc]}
        {:type :plant-fn-field,
         :field :sensor-f,
         :method capture,
         :args [loc],
         :temporal-constraints [{:type :bounds, :value [5 10]}]}]}]}],
   get-data-and-interpret
   [{:args [location1 location2],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
     :reward 0,
     :controllable false,
     :primitive false,
     :betweens [],
     :display-name "Get Data And Interpret",
     :post {:type :literal, :value true},
     :cost 0,
     :body
     [{:type :parallel,
       :body
       [{:type :plant-fn-symbol,
         :name this,
         :method evidence-and-interpret,
         :args [location1]}
        {:type :plant-fn-symbol,
         :name this,
         :method get-data-at,
         :args [location2]}]}]}],
   evidence-and-interpret
   [{:args [from],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
     :reward 0,
     :controllable false,
     :primitive false,
     :betweens [],
     :display-name "Evidence And Interpret",
     :post {:type :literal, :value true},
     :cost 0,
     :body
     [{:type :sequence,
       :body
       [{:type :plant-fn-symbol,
         :name this,
         :method evidence,
         :args [from]}
        {:type :plant-fn-symbol,
         :name this,
         :method interpret,
         :args [from]}]}]}],
   evidence
   [{:args [at],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
     :reward 0,
     :controllable false,
     :primitive false,
     :betweens [],
     :display-name "Evidence",
     :post {:type :literal, :value true},
     :cost 0,
     :body
     [{:type :plant-fn-field,
       :field :sensor-f,
       :method evidence,
       :args [at],
       :temporal-constraints [{:type :bounds, :value [15 25]}]}]}],
   interpret
   [{:args [place],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
     :reward 0,
     :controllable false,
     :primitive false,
     :betweens [],
     :display-name "Interpret",
     :post {:type :literal, :value true},
     :cost 0,
     :body
     [{:type :choose,
       :body
       [{:type :choice,
         :body
         [{:type :plant-fn-field,
           :field :sensor-f,
           :method interpret1,
           :args [place],
           :temporal-constraints [{:type :bounds, :value [15 25]}]}]}
        {:type :choice,
         :body
         [{:type :plant-fn-field,
           :field :sensor-f,
           :method interpret2,
           :args [place],
           :temporal-constraints [{:type :bounds, :value [15 25]}]}]}
        {:type :choice,
         :body
         [{:type :plant-fn-field,
           :field :sensor-f,
           :method interpret3,
           :args [place],
           :temporal-constraints
           [{:type :bounds, :value [15 25]}]}]}]}]}]}},
 isr-htn-demo
 {:type :pclass,
  :args [],
  :meta {:doc "ISR HTN Demo"},
  :fields
  {:plant
   {:access :private,
    :observable false,
    :initial
    {:type :pclass-ctor,
     :pclass sensor,
     :args [],
     :id "sensor1",
     :plant-part "isr1",
     :interface "RMQ"}},
   :htn
   {:access :private,
    :observable false,
    :initial {:type :pclass-ctor, :pclass isr-htn, :args [plant]}}}},
 sensor
 {:type :pclass,
  :args [],
  :meta {:doc "The ISR Sensor Plant API"},
  :methods
  {go-to
   [{:args [location],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [20 30]}],
     :reward 0,
     :controllable false,
     :primitive true,
     :betweens [],
     :display-name "Go To",
     :post {:type :literal, :value true},
     :cost 0,
     :body nil}],
   capture
   [{:args [location],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
     :reward 0,
     :controllable false,
     :primitive true,
     :betweens [],
     :display-name "Capture",
     :post {:type :literal, :value true},
     :cost 0,
     :body nil}],
   evidence
   [{:args [location],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
     :reward 0,
     :controllable false,
     :primitive true,
     :betweens [],
     :display-name "Evidence",
     :post {:type :literal, :value true},
     :cost 0,
     :body nil}],
   interpret1
   [{:args [location],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
     :reward 0,
     :controllable false,
     :primitive true,
     :betweens [],
     :display-name "Interpret 1",
     :post {:type :literal, :value true},
     :cost 0,
     :body nil,
     :doc "Interpret (Method 1)"}],
   interpret2
   [{:args [location],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
     :reward 0,
     :controllable false,
     :primitive true,
     :betweens [],
     :display-name "Interpret 2",
     :post {:type :literal, :value true},
     :cost 0,
     :body nil,
     :doc "Interpret (Method 2)"}],
   interpret3
   [{:args [location],
     :pre {:type :literal, :value true},
     :temporal-constraints [{:type :bounds, :value [0 :infinity]}],
     :reward 0,
     :controllable false,
     :primitive true,
     :betweens [],
     :display-name "Interpret 3",
     :post {:type :literal, :value true},
     :cost 0,
     :body nil,
     :doc "Interpret (Method 3)"}]}}}
